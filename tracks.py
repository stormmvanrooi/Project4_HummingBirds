# -*- coding: utf-8 -*-
"""tracks.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Kteb2CXXqYb54ll33aSxVmKKYPBq5e-9
"""

pip install spotipy --upgrade

pip install pymusixmatch

pip install vaderSentiment

import spotipy
from spotipy.oauth2 import SpotifyClientCredentials
import pandas as pd

#Authentication - without user
client_credentials_manager = SpotifyClientCredentials(client_id= '769c112e927049519f78eb01221bdebf', client_secret='6728b56477a04d6fac39b11af3016c1b')
sp = spotipy.Spotify(client_credentials_manager = client_credentials_manager)

playlist_link = "https://open.spotify.com/playlist/37i9dQZEVXbNG2KDcFcKOF?si=1333723a6eff4b7f"
playlist_URI = playlist_link.split("/")[-1].split("?")[0]
track_uris = [x["track"]["uri"] for x in sp.playlist_tracks(playlist_URI)["items"]]

artist_names = []
track_names = []
albums = []
artist_pops = []
artist_genres = []
track_pops=[]

artist_info = {}
for track in sp.playlist_tracks(playlist_URI)["items"]:
    #URI
    track_uri = track["track"]["uri"]
    
    #Track name
    track_name = track["track"]["name"]
    
    #Main Artist
    artist_uri = track["track"]["artists"][0]["uri"]
    artist_info = sp.artist(artist_uri)
    
    #Name, popularity, genre
    artist_name = track["track"]["artists"][0]["name"]
    artist_pop = artist_info["popularity"]
    artist_genre = artist_info["genres"]

    
    #Album
    album = track["track"]["album"]["name"]
    
    #Popularity of the track
    track_pop = track["track"]["popularity"]

    #Description
    #description = track[""]

    track_names.append(track_name)
    artist_names.append(artist_name)
    artist_genres.append(artist_genre)
    artist_pops.append(artist_pop)
    track_pops.append(track_pop)

df = {'artist':artist_names, 'track':track_names, 'genre':artist_genres, 'popularity':track_pops}
pd.DataFrame(df)

df1 = pd.DataFrame.from_dict(df)
df1

df2=df1.explode('genre')

from musixmatch import Musixmatch
from vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer

# Musixmatch API
musixmatch = Musixmatch('MUSIX_API')

analyser = SentimentIntensityAnalyzer()

sentiment_list = []
sentiment_score_list = []

for i in df2[['track', 'artist']].values:
    try:
        song = musixmatch.matcher_lyrics_get(i[1], i[0])
        song = song['message']['body']['lyrics']['lyrics_body']
        sentiment_score = analyser.polarity_scores(song)

        if sentiment_score['compound'] >= 0.05:
            sentiment_percentage = sentiment_score['compound']
            sentiment = 'Positive'
        elif sentiment_score['compound'] > -0.05 and sentiment_score['compound'] < 0.05:
            sentiment_percentage = sentiment_score['compound']
            sentiment = 'Neutral'
        elif sentiment_score['compound'] <= -0.05:
            sentiment_percentage = sentiment_score['compound']
            sentiment = 'Negative'

        sentiment_list.append(sentiment)
        sentiment_score_list.append((abs(sentiment_percentage) * 100))
        
    except:
        sentiment_list.append('None')
        sentiment_score_list.append(0)

df2['Sentiment'] = sentiment_list
df2['Sentiment_Score'] = sentiment_score_list

df2

df2[df2['genre'].str.contains('pop',na=False)]

df2[df2['genre'].str.contains('rock',na=False)]

import pandas as pd
df2.to_csv('spotify.csv')
df2

from google.colab import drive
drive.mount("/content/gdrive")

from google.colab import files
files.download('spotify.csv')